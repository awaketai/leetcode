<?php

// 剑指 Offer 15. 二进制中1的个数
// 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。

//     
//
//    提示：
//
//    请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
// 并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
//    在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。



// $a & $b 按位与，把$a和$b中都为1的设为1
// $a | $b 按位或，把$a和$b中任何一个为1的位设为1
// $a ^ $b 按位异或，把$a和$b中一个为1另一个为0的位设为1
// ~$a 按位取反，把$a中为0的位设为1，反之亦然
// php中无符号位移 >>>
// 有符号位移运算时，如果数字为正数时，位移后在前面补0
// 为负数时则在位移后在前面补1

// 无符号位移运算如果数字为正数时位移后在前面补0，若为负数时位移后在前面补1

// 方法一：
// 根据以上特点，做以下循环判断
// 1.判断n最右一位是否为1，根据结果计数
// 2.将n右移一位(无符号右移)

// 方法二：n&(n-1)
// (n-1)：二进制数字n最右边的1变成0，此1右边的0都变成1
// n&(n-1)：二进制数字n最右边的1变成0，其余不变
// 循环消去最右边的1，当n=0时跳出
class Solution {
    /**
     * @param Integer $n
     * @return Integer
     */
    function hammingWeight($n) {
        $res = 0;
        while ($n != 0){
            if(($n & 1) == 1){
                $res++;
            }
            $n >>= 1;
        }
        return $res;
    }

    function hammingWeight2($n) {
        $res = 0;
        while ($n != 0){
            $res++;
            $n &= $n-1;
        }
        return $res;
    }
}

$obj = new Solution();
$ret = $obj->hammingWeight2(00000000000000000000000000001011);
var_dump($ret);